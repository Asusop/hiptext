#include "xterm256.h"
#include <cmath>

static int g_cube_steps[] = { 0x00, 0x5F, 0x87, 0xAF, 0xD7, 0xFF };

static Pixel g_basic16[] = {
  rgb256(  0,   0,   0), rgb256(205,   0,   0), rgb256(  0, 205,   0),
  rgb256(205, 205,   0), rgb256(  0,   0, 238), rgb256(205,   0, 205),
  rgb256(  0, 205, 205), rgb256(229, 229, 229), rgb256(127, 127, 127),
  rgb256(255,   0,   0), rgb256(  0, 255,   0), rgb256(255, 255,   0),
  rgb256( 92,  92, 255), rgb256(255,   0, 255), rgb256(  0, 255, 255),
  rgb256(255, 255, 255)
};

constexpr Pixel xterm_to_rgb(uint8_t xcolor) {
  return ((xcolor < 16)
          ? g_basic16[xcolor]
          : ((xcolor < 232)
             ? rgb256(g_cube_steps[((xcolor - 16) / 36) % 6],
                      g_cube_steps[((xcolor - 16) / 6) % 6],
                      g_cube_steps[(xcolor - 16) % 6])
             : grey256(8 + (xcolor - 232) * 0x0A)));
}

Pixel g_xterm[256] = {
  xterm_to_rgb(0),
  xterm_to_rgb(1),
  xterm_to_rgb(2),
  xterm_to_rgb(3),
  xterm_to_rgb(4),
  xterm_to_rgb(5),
  xterm_to_rgb(6),
  xterm_to_rgb(7),
  xterm_to_rgb(8),
  xterm_to_rgb(9),
  xterm_to_rgb(10),
  xterm_to_rgb(11),
  xterm_to_rgb(12),
  xterm_to_rgb(13),
  xterm_to_rgb(14),
  xterm_to_rgb(15),
  xterm_to_rgb(16),
  xterm_to_rgb(17),
  xterm_to_rgb(18),
  xterm_to_rgb(19),
  xterm_to_rgb(20),
  xterm_to_rgb(21),
  xterm_to_rgb(22),
  xterm_to_rgb(23),
  xterm_to_rgb(24),
  xterm_to_rgb(25),
  xterm_to_rgb(26),
  xterm_to_rgb(27),
  xterm_to_rgb(28),
  xterm_to_rgb(29),
  xterm_to_rgb(30),
  xterm_to_rgb(31),
  xterm_to_rgb(32),
  xterm_to_rgb(33),
  xterm_to_rgb(34),
  xterm_to_rgb(35),
  xterm_to_rgb(36),
  xterm_to_rgb(37),
  xterm_to_rgb(38),
  xterm_to_rgb(39),
  xterm_to_rgb(40),
  xterm_to_rgb(41),
  xterm_to_rgb(42),
  xterm_to_rgb(43),
  xterm_to_rgb(44),
  xterm_to_rgb(45),
  xterm_to_rgb(46),
  xterm_to_rgb(47),
  xterm_to_rgb(48),
  xterm_to_rgb(49),
  xterm_to_rgb(50),
  xterm_to_rgb(51),
  xterm_to_rgb(52),
  xterm_to_rgb(53),
  xterm_to_rgb(54),
  xterm_to_rgb(55),
  xterm_to_rgb(56),
  xterm_to_rgb(57),
  xterm_to_rgb(58),
  xterm_to_rgb(59),
  xterm_to_rgb(60),
  xterm_to_rgb(61),
  xterm_to_rgb(62),
  xterm_to_rgb(63),
  xterm_to_rgb(64),
  xterm_to_rgb(65),
  xterm_to_rgb(66),
  xterm_to_rgb(67),
  xterm_to_rgb(68),
  xterm_to_rgb(69),
  xterm_to_rgb(70),
  xterm_to_rgb(71),
  xterm_to_rgb(72),
  xterm_to_rgb(73),
  xterm_to_rgb(74),
  xterm_to_rgb(75),
  xterm_to_rgb(76),
  xterm_to_rgb(77),
  xterm_to_rgb(78),
  xterm_to_rgb(79),
  xterm_to_rgb(80),
  xterm_to_rgb(81),
  xterm_to_rgb(82),
  xterm_to_rgb(83),
  xterm_to_rgb(84),
  xterm_to_rgb(85),
  xterm_to_rgb(86),
  xterm_to_rgb(87),
  xterm_to_rgb(88),
  xterm_to_rgb(89),
  xterm_to_rgb(90),
  xterm_to_rgb(91),
  xterm_to_rgb(92),
  xterm_to_rgb(93),
  xterm_to_rgb(94),
  xterm_to_rgb(95),
  xterm_to_rgb(96),
  xterm_to_rgb(97),
  xterm_to_rgb(98),
  xterm_to_rgb(99),
  xterm_to_rgb(100),
  xterm_to_rgb(101),
  xterm_to_rgb(102),
  xterm_to_rgb(103),
  xterm_to_rgb(104),
  xterm_to_rgb(105),
  xterm_to_rgb(106),
  xterm_to_rgb(107),
  xterm_to_rgb(108),
  xterm_to_rgb(109),
  xterm_to_rgb(110),
  xterm_to_rgb(111),
  xterm_to_rgb(112),
  xterm_to_rgb(113),
  xterm_to_rgb(114),
  xterm_to_rgb(115),
  xterm_to_rgb(116),
  xterm_to_rgb(117),
  xterm_to_rgb(118),
  xterm_to_rgb(119),
  xterm_to_rgb(120),
  xterm_to_rgb(121),
  xterm_to_rgb(122),
  xterm_to_rgb(123),
  xterm_to_rgb(124),
  xterm_to_rgb(125),
  xterm_to_rgb(126),
  xterm_to_rgb(127),
  xterm_to_rgb(128),
  xterm_to_rgb(129),
  xterm_to_rgb(130),
  xterm_to_rgb(131),
  xterm_to_rgb(132),
  xterm_to_rgb(133),
  xterm_to_rgb(134),
  xterm_to_rgb(135),
  xterm_to_rgb(136),
  xterm_to_rgb(137),
  xterm_to_rgb(138),
  xterm_to_rgb(139),
  xterm_to_rgb(140),
  xterm_to_rgb(141),
  xterm_to_rgb(142),
  xterm_to_rgb(143),
  xterm_to_rgb(144),
  xterm_to_rgb(145),
  xterm_to_rgb(146),
  xterm_to_rgb(147),
  xterm_to_rgb(148),
  xterm_to_rgb(149),
  xterm_to_rgb(150),
  xterm_to_rgb(151),
  xterm_to_rgb(152),
  xterm_to_rgb(153),
  xterm_to_rgb(154),
  xterm_to_rgb(155),
  xterm_to_rgb(156),
  xterm_to_rgb(157),
  xterm_to_rgb(158),
  xterm_to_rgb(159),
  xterm_to_rgb(160),
  xterm_to_rgb(161),
  xterm_to_rgb(162),
  xterm_to_rgb(163),
  xterm_to_rgb(164),
  xterm_to_rgb(165),
  xterm_to_rgb(166),
  xterm_to_rgb(167),
  xterm_to_rgb(168),
  xterm_to_rgb(169),
  xterm_to_rgb(170),
  xterm_to_rgb(171),
  xterm_to_rgb(172),
  xterm_to_rgb(173),
  xterm_to_rgb(174),
  xterm_to_rgb(175),
  xterm_to_rgb(176),
  xterm_to_rgb(177),
  xterm_to_rgb(178),
  xterm_to_rgb(179),
  xterm_to_rgb(180),
  xterm_to_rgb(181),
  xterm_to_rgb(182),
  xterm_to_rgb(183),
  xterm_to_rgb(184),
  xterm_to_rgb(185),
  xterm_to_rgb(186),
  xterm_to_rgb(187),
  xterm_to_rgb(188),
  xterm_to_rgb(189),
  xterm_to_rgb(190),
  xterm_to_rgb(191),
  xterm_to_rgb(192),
  xterm_to_rgb(193),
  xterm_to_rgb(194),
  xterm_to_rgb(195),
  xterm_to_rgb(196),
  xterm_to_rgb(197),
  xterm_to_rgb(198),
  xterm_to_rgb(199),
  xterm_to_rgb(200),
  xterm_to_rgb(201),
  xterm_to_rgb(202),
  xterm_to_rgb(203),
  xterm_to_rgb(204),
  xterm_to_rgb(205),
  xterm_to_rgb(206),
  xterm_to_rgb(207),
  xterm_to_rgb(208),
  xterm_to_rgb(209),
  xterm_to_rgb(210),
  xterm_to_rgb(211),
  xterm_to_rgb(212),
  xterm_to_rgb(213),
  xterm_to_rgb(214),
  xterm_to_rgb(215),
  xterm_to_rgb(216),
  xterm_to_rgb(217),
  xterm_to_rgb(218),
  xterm_to_rgb(219),
  xterm_to_rgb(220),
  xterm_to_rgb(221),
  xterm_to_rgb(222),
  xterm_to_rgb(223),
  xterm_to_rgb(224),
  xterm_to_rgb(225),
  xterm_to_rgb(226),
  xterm_to_rgb(227),
  xterm_to_rgb(228),
  xterm_to_rgb(229),
  xterm_to_rgb(230),
  xterm_to_rgb(231),
  xterm_to_rgb(232),
  xterm_to_rgb(233),
  xterm_to_rgb(234),
  xterm_to_rgb(235),
  xterm_to_rgb(236),
  xterm_to_rgb(237),
  xterm_to_rgb(238),
  xterm_to_rgb(239),
  xterm_to_rgb(240),
  xterm_to_rgb(241),
  xterm_to_rgb(242),
  xterm_to_rgb(243),
  xterm_to_rgb(244),
  xterm_to_rgb(245),
  xterm_to_rgb(246),
  xterm_to_rgb(247),
  xterm_to_rgb(248),
  xterm_to_rgb(249),
  xterm_to_rgb(250),
  xterm_to_rgb(251),
  xterm_to_rgb(252),
  xterm_to_rgb(253),
  xterm_to_rgb(254),
  xterm_to_rgb(255),
};

template<typename T>
inline T sqr(T val) {
  return val * val;
}

uint8_t rgb_to_xterm256(const Pixel& pix) {
  uint8_t best_match = 0;
  int smallest_distance = 1000000000;
  int dist;
  for (int c = 16; c < 256; ++c) {
    dist = sqrt(sqr(g_xterm[c].r - pix.r) +
                sqr(g_xterm[c].g - pix.g) +
                sqr(g_xterm[c].b - pix.b));
    if (dist < smallest_distance) {
      smallest_distance = dist;
      best_match = c;
    }
  }
  return best_match;
}

// void ShowCase() {
//   for (int n = 16; n < 256; n++) {
//     cout << "\x1b[48;5;" << n << "m";
//     Pixel pix = g_xterm[n];
//     printf("(%0.2f, %0.2f, %0.2f)", pix.r, pix.g, pix.b);
//     cout << "\x1b[0m\n";
//   }
// }

// For Emacs:
// Local Variables:
// mode:c++
// indent-tabs-mode:nil
// tab-width:2
// c-basic-offset:2
// c-file-style: nil
// End:
// For VIM:
// vim:set expandtab softtabstop=2 shiftwidth=2 tabstop=2:
